// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: shortener.proto

package shortener_v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerV0Client is the client API for ShortenerV0 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerV0Client interface {
	GetShortUrl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetOriginUrl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type shortenerV0Client struct {
	cc grpc.ClientConnInterface
}

func NewShortenerV0Client(cc grpc.ClientConnInterface) ShortenerV0Client {
	return &shortenerV0Client{cc}
}

func (c *shortenerV0Client) GetShortUrl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shortener_v0.ShortenerV0/GetShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV0Client) GetOriginUrl(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shortener_v0.ShortenerV0/GetOriginUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerV0Server is the server API for ShortenerV0 service.
// All implementations must embed UnimplementedShortenerV0Server
// for forward compatibility
type ShortenerV0Server interface {
	GetShortUrl(context.Context, *Request) (*Response, error)
	GetOriginUrl(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedShortenerV0Server()
}

// UnimplementedShortenerV0Server must be embedded to have forward compatible implementations.
type UnimplementedShortenerV0Server struct {
}

func (UnimplementedShortenerV0Server) GetShortUrl(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedShortenerV0Server) GetOriginUrl(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginUrl not implemented")
}
func (UnimplementedShortenerV0Server) mustEmbedUnimplementedShortenerV0Server() {}

// UnsafeShortenerV0Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerV0Server will
// result in compilation errors.
type UnsafeShortenerV0Server interface {
	mustEmbedUnimplementedShortenerV0Server()
}

func RegisterShortenerV0Server(s grpc.ServiceRegistrar, srv ShortenerV0Server) {
	s.RegisterService(&ShortenerV0_ServiceDesc, srv)
}

func _ShortenerV0_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV0Server).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener_v0.ShortenerV0/GetShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV0Server).GetShortUrl(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV0_GetOriginUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV0Server).GetOriginUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener_v0.ShortenerV0/GetOriginUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV0Server).GetOriginUrl(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerV0_ServiceDesc is the grpc.ServiceDesc for ShortenerV0 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerV0_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener_v0.ShortenerV0",
	HandlerType: (*ShortenerV0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortUrl",
			Handler:    _ShortenerV0_GetShortUrl_Handler,
		},
		{
			MethodName: "GetOriginUrl",
			Handler:    _ShortenerV0_GetOriginUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
